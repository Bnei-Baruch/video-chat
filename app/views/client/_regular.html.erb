<script type="text/javascript" charset="utf-8">
    var apiKey = <%= @api_key %>;
    var sessionId = '<%= @session.session_id %>';
    var token = '<%= @token %>';

    var session;
    var publisher;
    var subscribers = {};

    // Un-comment either of the following to set automatic logging and exception handling.
    // See the exceptionHandler() method below.
    // TB.setLogLevel(TB.DEBUG);
    // TB.addEventListener("exception", exceptionHandler);

    if (TB.checkSystemRequirements() != TB.HAS_REQUIREMENTS) {
        alert('Minimum System Requirements not met!');
    } else {
        session = TB.initSession(sessionId);	// Initialize session

        // Add event listeners to the session
        session.addEventListener('sessionConnected', sessionConnectedHandler);
        session.addEventListener('sessionDisconnected', sessionDisconnectedHandler);
        session.addEventListener('connectionCreated', connectionCreatedHandler);
        session.addEventListener('connectionDestroyed', connectionDestroyedHandler);
        session.addEventListener('streamCreated', streamCreatedHandler);
        session.addEventListener('streamDestroyed', streamDestroyedHandler);

        // Connect to the session
        session.connect(apiKey, token);
    }

    //--------------------------------------
    //  LINK CLICK HANDLERS
    //--------------------------------------
    
    function publish() {
        if (!publisher) {
            var name = $("#name").val();
            var html = "<div class='item' id='myOwnCamera'><div>" + name + "</div><div id='opentok_publisher'></div></div>";
            $("#myCamera").before(html);

            var publisherProps = {
                microphoneEnabled: false,
                name: $("#name").val()
            };
            publisher = session.publish('opentok_publisher', publisherProps); 	// Pass the replacement div id to the publish method
            show('unpublishLink');
            hide('publishLink');
        }
    }

    function unpublish() {
        if (publisher) {
            session.unpublish(publisher);
        }
        publisher = null;

        show('publishLink');
        hide('unpublishLink');
    }

    //--------------------------------------
    //  OPENTOK EVENT HANDLERS
    //--------------------------------------

    function sessionConnectedHandler(event) {
        // Subscribe to all streams currently in the Session
        for (var i = 0; i < event.streams.length; i++) {
            addStream(event.streams[i]);
        }
        // Now possible to start publishing
        document.getElementById('status').innerHTML = 'You can start publishing.';

        show('disconnectLink');
        show('publishLink');
        hide('connectLink');
    }

    function streamCreatedHandler(event) {
        // Subscribe to these newly created streams
        for (var i = 0; i < event.streams.length; i++) {
            addStream(event.streams[i]);
        }
    }

    function streamDestroyedHandler(event) {
        // This signals that a stream was destroyed. Any Subscribers will automatically be removed.
        // This default behaviour can be prevented using event.preventDefault()
    }

    function sessionDisconnectedHandler(event) {
        // This signals that the user was disconnected from the Session. Any subscribers and publishers
        // will automatically be removed. This default behaviour can be prevented using event.preventDefault()
        publisher = null;

        show('connectLink');
        hide('disconnectLink');
        hide('publishLink');
        hide('unpublishLink');
    }

    function connectionDestroyedHandler(event) {
        // This signals that connections were destroyed
    }

    function connectionCreatedHandler(event) {
        // This signals new connections have been created.
    }

    /*
     If you un-comment the call to TB.setEventLister(), above, OpenTok
     calls the exceptionHandler() method when exception events occur.
     You can modify this method to further process exception events.
     If you un-comment the call to TB.setLogLevel(), above, OpenTok
     automatically displays exception event messages.
     */
    function exceptionHandler(event) {
        alert("Exception: " + event.code + "::" + event.message);
    }

    //--------------------------------------
    //  HELPER METHODS
    //--------------------------------------

    function addStream(stream) {
        // Check if this is the stream that I am publishing. If not
        // we choose to subscribe to the stream.
        if (stream.connection.connectionId == session.connection.connectionId) {
            return;
        }
        var divId = stream.streamId;	// Give the replacement div the id of the stream as its id
        var html = "<div class='item'><div>" + stream.name + "</div><div id='" + divId + "'></div></div>";
        $("#myCamera").append(html);
        subscribers[stream.streamId] = session.subscribe(stream, divId);
    }

    function show(id) {
        $("#"+id).show();
    }

    function hide(id) {
        $("#"+id).hide();
    }



</script>
<div id="links">
  <div id="status" class="smalltype">Connecting...</div>
  <a href="#" onclick="javascript:publish()" id="publishLink">Publish</a>
  <a href="#" onclick="javascript:unpublish()" id="unpublishLink">Unpublish</a>
</div>
<div id="myCamera" class="publisherContainer">
</div>